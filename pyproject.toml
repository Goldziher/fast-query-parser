[build-system]
requires = ["maturin>=1.0,<2.0"]
build-backend = "maturin"

[project]
name = "fast-query-parsers"
requires-python = ">=3.8"
license = {text = "MIT"}
version = "1.0.4"
description = "Ultra-fast query string and url-encoded form-data parsers"
readme = "README.rst"
dependencies = []
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python",
    "Programming Language :: Rust",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Typing :: Typed",
]
keywords = [
    "query",
    "query-parameters",
    "rust",
    "asgi",
    "parser",
]
authors = [
    {name = "Na'aman Hirschfeld", email = "nhirschfeld@gmail.com"},
]
maintainers = [
    {name = "Jacob Coffee", email = "jacob@z7x.org"},
    {name = "Cody Fincher", email = "cody.fincher@gmail.com"},
    {name = "Janek NouvertnÃ©", email = "provinzkraut@posteo.de"},
    {name = "Peter Schutt", email = "peter.github@proton.me"},
]

[tool.pdm.dev-dependencies]
dev = [
    "pyperf>=2.6.1",
    "maturin>=1.3.0",
    "pytest>=7.4.2",
    "ruff>=0.0.292",
    "pre-commit>=3.4.0",
    "sourcery>=1.10.1",
    "pip>=23.2.1",
]
docs = [
    "sphinx>=7.1.2",
    "sphinx-autobuild>=2021.3.14",
    "sphinx-toolbox>=3.5.0",
    "blacken-docs>=1.16.0",
    "sphinx-design>=0.5.0",
    "sphinxcontrib-mermaid>=0.9.2",
    "shibuya>=2023.10.5",
    "myst-parser>=2.0.0",
]

[tool.pdm.scripts]
lint = "pre-commit run --all-files"
test = "pytest tests"
docs-serve = "sphinx-autobuild docs docs/_build/ -j auto --watch src --watch docs --watch tests --port 8002"
ci = {composite = ["lint", "test"]}

[tool.pdm.build]
includes = ["src"]

[tool.maturin]
sdist-include = ["Cargo.lock"]
strip = true

[tool.ruff]
select = ["ALL"]
ignore = [
    "A003", # flake8-builtins - class attribute {name} is shadowing a python builtin
    "B010", # flake8-bugbear - do not call setattr with a constant attribute value
    "D100", # pydocstyle - missing docstring in public module
    "D101", # pydocstyle - missing docstring in public class
    "D102", # pydocstyle - missing docstring in public method
    "D103", # pydocstyle - missing docstring in public function
    "D104", # pydocstyle - missing docstring in public package
    "D105", # pydocstyle - missing docstring in magic method
    "D106", # pydocstyle - missing docstring in public nested class
    "D107", # pydocstyle - missing docstring in __init__
    "D202", # pydocstyle - no blank lines allowed after function docstring
    "D203", # pydocstyle - 1 blank line required before class docstring
    "D205", # pydocstyle - 1 blank line required between summary line and description
    "D415", # pydocstyle - first line should end with a period, question mark, or exclamation point
    "E501", # pycodestyle line too long, handled by black
    "N818", # pep8-naming - exception name should be named with an Error suffix
    "S311", # flake8-bandit - Standard pseudo-random generators are not suitable for security/cryptographic purposes
    "S101", # asserts
    "D213", # multiline summary
    "D417"
]
line-length = 120
target-version = "py38"


[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.pep8-naming]
classmethod-decorators = [
    "classmethod",
]

[tool.ruff.isort]
known-first-party = ["src", "tests"]

[tool.ruff.per-file-ignores]
"**/*.*" = ["ANN101", "ANN401", "ANN102", "TD",]
"docs/**/*.*" = [
    "S",
    "B",
    "DTZ",
    "A",
    "TCH",
    "ERA",
    "D",
    "RET",
    "E731",
    "RUF012",
    "FA100",
    "ARG001",
]
"docs/conf.py" = ["FIX002", "ARG001",]
"tools/**/*.*" = ["D", "ARG", "EM", "TRY", "G", "FBT", "INP"]
